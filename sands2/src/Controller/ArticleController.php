<?php
/**
 * Created by PhpStorm.
 * User: Jean-baptiste
 * Date: 31/10/2018
 * Time: 15:49
 */

namespace App\Controller;

use App\Form\ArticleType;
use App\Entity\Article;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;

class ArticleController extends Controller
{

    /**
     * @Route("/newArticle", name="newArticle")
     */
    public function registerAction(Request $request) {
        // 1) build the form
        $article = new Article();
        $form = $this->createForm(ArticleType::class, $article);
        // 2) handle the submit (will only happen on POST)
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $article->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            // Move the file to the directory where images are stored
            try {
                $file->move(
                    $this->getParameter('uploads_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                $this->addFlash('danger', 'Une erreur est survenue.');
            }
            $article->setImage($fileName);
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($article);
            $entityManager->flush();
            // ... do any other work - like sending them an email, etc
            // maybe set a "flash" success message for the user
            $this->addFlash('success', 'Votre article à bien été enregistré.');
            //return $this->redirectToRoute('login');
        }
        return $this->render('article/addArticle.html.twig', ['form' => $form->createView(), 'title' => 'Ajouter']);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("article/delete/{id}")
     * @Method({"DELETE"})
     */
    public function deleteArticle(Request $request, $id){
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($article);
        $entityManager->flush();

        $this->addFlash('success', 'Votre article à bien été supprimé.');
        $response = new Response();
        $response->send();
    }

    /**
     * @Route("/article/edit/{id}", name="edit_article")
     * Method({"GET", "POST"})
     */
    public function editArticle(Request $request, $id) {
        $article = new Article();
        $article = $this->getDoctrine()
            ->getRepository('App:Article')
            ->find($id);
        $form = $this->createFormBuilder($article)
            ->add('name', TextType::class)
            ->add('description', TextareaType::class)
            ->add('category', EntityType::class, array(
                'class' => 'App\Entity\Category',
                'choice_label' => 'name',
                'expanded' => false,
                'multiple' => false
            ))
            ->add('price', MoneyType::class)
            ->add('submit', SubmitType::class, ['label'=>'Envoyer', 'attr'=>['class'=>'btn-primary btn-block']])
            ->getForm();
        // 2) handle the submit (will only happen on POST)
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($article);
            $entityManager->flush();
            // ... do any other work - like sending them an email, etc
            // maybe set a "flash" success message for the user
            $this->addFlash('success', 'Votre article à bien été enregistré.');
            //return $this->redirectToRoute('login');
        }
        return $this->render('article/editArticle.html.twig', ['form' => $form->createView(), 'title' => 'Editer']);
    }}